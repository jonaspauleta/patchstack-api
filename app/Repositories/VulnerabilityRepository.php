<?php

namespace App\Repositories;

use App\Http\Requests\Vulnerability\ListVulnerabilityRequest;
use App\Http\Requests\Vulnerability\ShowVulnerabilityRequest;
use App\Models\Vulnerability;
use Illuminate\Contracts\Pagination\Paginator;
use Illuminate\Support\Facades\Storage;
use Spatie\QueryBuilder\AllowedFilter;
use Spatie\QueryBuilder\AllowedInclude;
use Spatie\QueryBuilder\QueryBuilder;
use Symfony\Component\HttpFoundation\Response;

class VulnerabilityRepository extends BaseRepository {
    const ALLOWED_INCLUDES = [
        'factors',
        'user',
    ];

    public function list(ListVulnerabilityRequest $request): Paginator {
        $query = QueryBuilder::for(Vulnerability::class)
            ->allowedFilters([
                AllowedFilter::exact('user_id'),
            ])
            ->allowedIncludes(self::ALLOWED_INCLUDES);

        return $this->paginate($request, $query);
    }

    public function create(array $data): Vulnerability {
        return Vulnerability::create($data);
    }

    public function update(Vulnerability $vulnerability, array $data): bool {
        return $vulnerability->update($data);
    }

    public function show(ShowVulnerabilityRequest $request, Vulnerability $vulnerability): Vulnerability {
        $query = QueryBuilder::for(Vulnerability::class)
            ->allowedIncludes(self::ALLOWED_INCLUDES)
            ->find($vulnerability->id);

        return $query;
    }

    public function destroy(Vulnerability $vulnerability): bool {
        if (request()->user()->cannot('delete', Vulnerability::class)) {
            return false;
        }

        $filePath = str_replace('/storage/', '', $vulnerability->image_url);
        if (Storage::disk('public')->exists($filePath)) {
            Storage::disk('public')->delete($filePath);
        }

        return $vulnerability->delete();
    }
}
