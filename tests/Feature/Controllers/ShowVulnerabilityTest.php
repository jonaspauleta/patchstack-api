<?php

use Modules\Organizations\Models\Cluster;
use Modules\Organizations\Models\Organization;
use Modules\Users\Models\User;

beforeEach(function () {
    $this->method = 'GET';
    $this->routeName = 'organizations.clusters.id.show';
    $this->org = Organization::factory()->create();
    $this->data = [
        'organization_id' => $this->org->id,
        'name' => 'test_cluster_1',
        'unlocked_modules' =>  ['53e0c780d6c472d743800000'],
    ];

    $this->cluster = Cluster::factory()->create($this->data);
    $this->route = route($this->routeName, ['org' => $this->org, 'cluster' => $this->cluster]);
});

it('responds with status 404 if organization not found', function () {
    $this->assertNotFoundOnNonExistingOrganization(
        $this->method,
        route($this->routeName, ['org' => 123, 'cluster' => $this->cluster])
    );
});

it('responds with status 404 if cluster not found', function () {
    $this->assertNotFoundOnNonExistingCluster(
        $this->method,
        route($this->routeName, ['org' => $this->org, 'cluster' => 123])
    );
});

it('responds with status 404 if path does not belong to provided org', function () {
    $newOrg = Organization::factory()->create();
    $newCluster = Cluster::factory()->create([
        'organization_id' => $this->org->id,
    ]);

    $this->assertNotFoundOnNonExistingCluster(
        $this->method,
        route($this->routeName, ['org' => $newOrg, 'cluster' => $newCluster])
    );
});

it('returns cluster', function () {
    /** @var TestResponse $response */
    $response = $this->get($this->route);

    $response
        ->assertOk()
        ->assertJsonFragment(array_merge(
            ['id' => $this->cluster->id],
            $this->data
        ));

    $this->assertArrayNotHasKey(key: 'administrators', array: $response->json('data'));
});

it('returns cluster with include parameter', function () {
    $administratorId = User::factory()->create()->id;
    $this->cluster->administrators()->attach(id: $administratorId);

    /** @var TestResponse $response */
    $response = $this->get($this->route . '?' . http_build_query([
            'include' => ['administrators'],
        ]));

    $response
        ->assertOk()
        ->assertJsonFragment(array_merge(
            ['id' => $this->cluster->id],
            $this->data
        ));

    $this->assertArrayHasKey(key: 'administrators', array: $response->json('data'));
});
