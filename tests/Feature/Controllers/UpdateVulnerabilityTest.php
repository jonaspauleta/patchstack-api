<?php

use Database\Enums\Tables;
use Illuminate\Support\Arr;
use Modules\Organizations\Models\Cluster;
use Modules\Organizations\Models\Organization;
use Modules\Organizations\Models\Thread;
use Modules\Users\Models\User;

beforeEach(function () {
    $this->data = [
        'percentage_calculation_method' => 'all_modules',
        'name' => '__dummy_name__',
        'unlocked_modules' =>  ['53e0c780d6c472d7438b4568' => true],
        'epilogue' => '__dummy_epilogue__',
        'external_link' => 'https://www.google.com/',
        'external_link_label' => '__dummy_label__',
        'school_year' => now()->year,
        'active' => true,
    ];

    $this->cluster = Cluster::factory()->create($this->data);
    $this->org = Organization::find($this->cluster->organization_id);
    $this->method = 'PATCH';
    $this->routeName = 'organizations.clusters.id.update';
    $this->route = route($this->routeName, ['org' => $this->org, 'cluster' => $this->cluster]);
});

it('responds with status 404 if organization not found', function () {
    $this->assertNotFoundOnNonExistingOrganization(
        $this->method,
        route($this->routeName, ['org' => 123, 'cluster' => $this->cluster])
    );
});

it('responds with status 404 if cluster not found', function () {
    $this->assertNotFoundOnNonExistingCluster(
        $this->method,
        route($this->routeName, ['org' => $this->org, 'cluster' => 123])
    );
});

it('responds with status 404 if cluster does not belong to provided org', function () {
    /** @var Cluster $newCluster */
    $newCluster = Cluster::factory()->create([
        'organization_id' => $this->org->id,
    ]);

    /** @var Organization $newOrg */
    $newOrg = Organization::factory()->create();

    $this->assertNotFoundOnNonExistingCluster(
        $this->method,
        route($this->routeName, ['org' => $newOrg->id, 'cluster' => $newCluster->id])
    );
});

it('responds with unprocessed (category id not found)', function () {
    $this->assertDatabaseCount(table: Tables::CLUSTERS, count: 1);
    $this->assertDatabaseCount(table: Tables::CLUSTER_ADMINISTRATOR, count: 0);

    $response = $this->requestToRoute(
        method: $this->method,
        route: $this->route,
        data: [
            'category_id' => 123,
            'cluster_administrators' => [123, 321],
        ],
    );

    $response->assertUnprocessable()
        ->assertJsonFragment([
            'category_id' => ['The selected category id is invalid.'],
            'cluster_administrators' => ['The selected cluster administrators is invalid.'],
        ]);

    $this->assertDatabaseCount(table: Tables::CLUSTERS, count: 1);
    $this->assertDatabaseCount(table: Tables::CLUSTER_ADMINISTRATOR, count: 0);
    $this->assertDatabaseMissing(table: Tables::CLUSTER_ADMINISTRATOR, data: [
        'cluster_id' => 1,
        'user_id' => 123,
    ]);
});

it('successfully updates a cluster with new data (partial)', function () {
    $data = $this->data;

    $data['unlocked_modules'] = serialize($data['unlocked_modules']);

    $this->assertDatabaseHas(Tables::CLUSTERS, $data);

    $newData = [
        'category_id' => $this->cluster->category_id,
        'name' => '__change_dummy_name__',
        'active' => false,
    ];

    $response = $this->requestToRoute(
        method: $this->method,
        route: $this->route,
        data: $newData,
    );

    $response->assertOk()
        ->assertJsonFragment($newData);

    $this->assertDatabaseHas(
        table: Tables::CLUSTERS,
        data: array_merge($newData, [
            'organization_id' => $this->org->id,
            'active' => (int) $newData['active'],
        ])
    );
});

it('successfully updates a cluster with new data (with cluster_administrators)', function () {
    $data = $this->data;

    $data['unlocked_modules'] = serialize($data['unlocked_modules']);

    $this->assertDatabaseHas(Tables::CLUSTERS, $data);

    $userId = User::factory()->create()->id;

    $newData = [
        'category_id' => $this->cluster->category_id,
        'name' => '__change_dummy_name__',
        'active' => false,
        'cluster_administrators' => [
            $userId,
        ],
    ];

    $response = $this->requestToRoute(
        method: $this->method,
        route: $this->route,
        data: $newData,
    );

    $withoutModules = Arr::except($newData, 'cluster_administrators');

    $response->assertOk()
        ->assertJsonFragment($withoutModules);

    $this->assertDatabaseHas(
        table: Tables::CLUSTERS,
        data: array_merge($withoutModules, [
            'organization_id' => $this->org->id,
            'active' => (int) $newData['active'],
        ])
    );

    $response = $response->json('data');

    $this->assertNotNull($response['unlocked_modules']);

    $response['unlocked_modules'] = serialize($response['unlocked_modules']);

    $this->assertDatabaseCount(table: Tables::CLUSTERS, count: 1);
    $this->assertDatabaseHas(table: Tables::CLUSTERS, data: $response);

    $this->assertDatabaseCount(table: Tables::CLUSTER_ADMINISTRATOR, count: 1);
    $this->assertDatabaseHas(table: Tables::CLUSTER_ADMINISTRATOR, data: [
        'cluster_id' => $response['id'],
        'user_id' => $userId,
    ]);
});

it('successfully updates a cluster with new data (with cluster_administrators already associated)', function () {
    $data = $this->data;

    $data['unlocked_modules'] = serialize($data['unlocked_modules']);

    $this->assertDatabaseHas(Tables::CLUSTERS, $data);

    $oldUserId = User::factory()->create()->id;

    $this->cluster->administrators()->attach(id: $oldUserId);

    $this->assertDatabaseCount(table: Tables::CLUSTER_ADMINISTRATOR, count: 1);

    $userId = User::factory()->create()->id;
    $newData = [
        'category_id' => $this->cluster->category_id,
        'name' => '__change_dummy_name__',
        'active' => false,
        'cluster_administrators' => [
            $userId,
        ],
    ];

    $response = $this->requestToRoute(
        method: $this->method,
        route: $this->route,
        data: $newData,
    );

    $withoutModules = Arr::except($newData, 'cluster_administrators');

    $response->assertOk()
        ->assertJsonFragment($withoutModules);

    $this->assertDatabaseHas(
        table: Tables::CLUSTERS,
        data: array_merge($withoutModules, [
            'organization_id' => $this->org->id,
            'active' => (int) $newData['active'],
        ])
    );

    $response = $response->json('data');

    $this->assertNotNull($response['unlocked_modules']);

    $response['unlocked_modules'] = serialize($response['unlocked_modules']);

    $this->assertDatabaseCount(table: Tables::CLUSTERS, count: 1);
    $this->assertDatabaseHas(table: Tables::CLUSTERS, data: $response);

    $this->assertDatabaseCount(table: Tables::CLUSTER_ADMINISTRATOR, count: 1);
    $this->assertDatabaseHas(table: Tables::CLUSTER_ADMINISTRATOR, data: [
        'cluster_id' => $response['id'],
        'user_id' => $userId,
    ]);

    $this->assertDatabaseMissing(table: Tables::CLUSTER_ADMINISTRATOR, data: [
        'cluster_id' => $response['id'],
        'user_id' => $oldUserId,
    ]);
});

it('successfully synca a cluster but does not update a thread', function () {
    $data = $this->data;
    $data['unlocked_modules'] = serialize($data['unlocked_modules']);

    $this->assertDatabaseHas(Tables::CLUSTERS, $data);

    $userId = User::factory()->create()->id;
    $newThread = Thread::factory()->create();
    $newData = [
        'category_id' => $this->cluster->category_id,
        'name' => '__change_dummy_name__',
        'active' => false,
        'cluster_administrators' => [
            $userId,
        ],
        'thread_id' => $newThread->id,
    ];

    $response = $this->requestToRoute(
        method: $this->method,
        route: $this->route,
        data: $newData,
    );

    $this->assertDatabaseMissing(
        table: Tables::CLUSTERS,
        data: [
            'id' => $response->json('data.id'),
            'thread_id' => $newThread->id,
        ]
    );
});
