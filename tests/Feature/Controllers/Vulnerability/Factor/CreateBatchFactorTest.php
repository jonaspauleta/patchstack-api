<?php

use App\Models\User;
use App\Models\Vulnerability;
use Illuminate\Testing\TestResponse;
use Laravel\Sanctum\Sanctum;

beforeEach(function () {
    $this->routeName = 'vulnerabilities.factors.store.batch';

    $this->user = User::factory()->create([
        'is_admin' => true,
    ]);

    Sanctum::actingAs($this->user);

    $this->vulnerability = Vulnerability::factory()->create([
        'user_id' => $this->user->id,
    ]);

    $this->route = route($this->routeName, ['vulnerability' => $this->vulnerability->id]);
});

it('responds with status 404 if vulnerability not found', function () {
    $route = route($this->routeName, ['vulnerability' => 123456]);

    /** @var TestResponse $response */
    $response = $this->get($route);

    $response->assertNotFound();
});

it('creates a new factor', function () {
    $payload = [
        'factors' => [
            [
                'name' => 'New Factor 1',
                'value' => 1.1,
            ],
            [
                'name' => 'New Factor 2',
                'value' => 1.2,
            ],
        ],
    ];

    $response = $this->postJson($this->route, $payload);

    $response->assertStatus(201);
    $response->assertJsonStructure([
        'data' => [
            '*' => [
                'id',
                'name',
                'value',
            ],
        ],
    ]);
});

it('returns a forbidden response if user is not authorized', function () {
    $this->user->is_admin = false;

    $payload = [
        'factors' => [
            [
                'name' => 'New Factor 1',
                'value' => 1.1,
            ],
            [
                'name' => 'New Factor 2',
                'value' => 1.2,
            ],
        ],
    ];

    $response = $this->postJson($this->route, $payload);
    $response->assertStatus(403);

    $response->assertJsonStructure([
        'message',
    ]);
});
