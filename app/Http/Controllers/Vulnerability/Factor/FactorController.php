<?php

namespace App\Http\Controllers\Vulnerability\Factor;

use App\Actions\Vulnerability\Factor\CreateBatchFactor;
use App\Actions\Vulnerability\Factor\CreateFactor;
use App\Actions\Vulnerability\Factor\DestroyFactor;
use App\Actions\Vulnerability\Factor\ListFactors;
use App\Actions\Vulnerability\Factor\ShowFactor;
use App\Actions\Vulnerability\Factor\UpdateFactor;
use App\DTOs\Vulnerability\Factor\CreateBatchFactorData;
use App\DTOs\Vulnerability\Factor\CreateFactorData;
use App\DTOs\Vulnerability\Factor\UpdateFactorData;
use App\Http\Controllers\Controller;
use App\Http\Requests\Vulnerability\Factor\CreateBatchFactorRequest;
use App\Http\Requests\Vulnerability\Factor\CreateFactorRequest;
use App\Http\Requests\Vulnerability\Factor\ListFactorsRequest;
use App\Http\Requests\Vulnerability\Factor\ShowFactorRequest;
use App\Http\Requests\Vulnerability\Factor\UpdateFactorRequest;
use App\Http\Resources\FactorCollection;
use App\Http\Resources\FactorResource;
use App\Models\Factor;
use App\Models\Vulnerability;
use OpenApi\Annotations as OA;
use Symfony\Component\HttpFoundation\Response;

class FactorController extends Controller
{
    /**
     * @OA\Get(
     *     path="/api/vulnerabilities/{vulnerability}/factors",
     *     summary="Get factors for a vulnerability",
     *     tags={"Factor"},
     *     security={{"bearerAuth": {}}},
     *
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *
     *         @OA\Schema(type="integer"),
     *     ),
     *
     *     @OA\Parameter(
     *         name="per_page",
     *         in="query",
     *         description="Number of items per page",
     *         required=false,
     *
     *         @OA\Schema(type="integer")
     *     ),
     *
     *     @OA\Response(
     *         response=200,
     *         description="List of factors for the vulnerability",
     *
     *         @OA\JsonContent(
     *             type="array",
     *
     *             @OA\Items(ref="App\Http\Resources\FactorCollection"),
     *         ),
     *     ),
     *
     *     @OA\Response(
     *            response=403,
     *            description="Not authorized to view factors",
     *
     *            @OA\JsonContent(
     *                type="object",
     *
     *                @OA\Property(property="message", type="string", example="You are not authorized to view factors"),
     *            ),
     *        ),
     * )
     */
    public function index(
        ListFactorsRequest $request,
        Vulnerability $vulnerability,
        ListFactors $listFactors
    ): Response {
        if (request()->user()->cannot('viewAny', Factor::class)) {
            return response()->json([
                'message' => 'You are not authorized to view factors',
            ], Response::HTTP_FORBIDDEN);
        }

        return response()->json(
            FactorCollection::make($listFactors->execute($request, $vulnerability)),
            Response::HTTP_OK,
        );
    }

    /**
     * @OA\Post(
     *     path="/api/vulnerabilities/{vulnerability}/factors",
     *     summary="Create a new factor for a vulnerability",
     *     tags={"Factor"},
     *     security={{"bearerAuth": {}}},
     *
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *
     *         @OA\Schema(type="integer"),
     *     ),
     *
     *     @OA\RequestBody(
     *         required=true,
     *
     *         @OA\JsonContent(
     *             type="object",
     *
     *             @OA\Property(property="name", type="string", example="Factor Name"),
     *             @OA\Property(property="value", type="float", example="5.5"),
     *         ),
     *     ),
     *
     *     @OA\Response(
     *         response=201,
     *         description="Factor created successfully",
     *
     *         @OA\JsonContent(
     *             type="object",
     *             ref="App\Http\Resources\FactorResource",
     *         ),
     *     ),
     *
     *     @OA\Response(
     *            response=403,
     *            description="Not authorized to create factors",
     *
     *            @OA\JsonContent(
     *                type="object",
     *
     *                @OA\Property(property="message", type="string", example="You are not authorized to create factors"),
     *            ),
     *        ),
     * )
     */
    public function store(
        CreateFactorRequest $request,
        Vulnerability $vulnerability,
        CreateFactor $createFactor,
    ): Response {
        if (request()->user()->cannot('create', Factor::class)) {
            return response()->json([
                'message' => 'You are not authorized to create factors',
            ], Response::HTTP_FORBIDDEN);
        }

        $createFactorData = new CreateFactorData(
            $request->name,
            $request->value,
        );

        return response()->json(
            FactorResource::make($createFactor->execute($createFactorData, $vulnerability)),
            Response::HTTP_CREATED,
        );
    }

    /**
     * @OA\Post(
     *     path="/api/vulnerabilities/{vulnerability}/factors/batch",
     *     summary="Create multiple factors for a vulnerability in a batch",
     *     tags={"Factor"},
     *     security={{"bearerAuth": {}}},
     *
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *
     *         @OA\Schema(type="integer"),
     *     ),
     *
     *     @OA\RequestBody(
     *         required=true,
     *
     *         @OA\JsonContent(
     *             type="object",
     *
     *             @OA\Property(property="factors", type="array", @OA\Items(
     *                 @OA\Property(property="name", type="string", example="Factor Name"),
     *                 @OA\Property(property="value", type="float", example="5.5"),
     *             )),
     *         ),
     *     ),
     *
     *     @OA\Response(
     *         response=201,
     *         description="Factors created successfully",
     *
     *         @OA\JsonContent(
     *             type="object",
     *
     *             @OA\Property(property="message", type="string", example="Factors created successfully"),
     *         ),
     *     ),
     *
     *     @OA\Response(
     *          response=500,
     *          description="Internal Server Error",
     *
     *          @OA\JsonContent(
     *              type="object",
     *
     *              @OA\Property(property="message", type="string", example="Error creating factors"),
     *          ),
     *     ),
     *
     *     @OA\Response(
     *           response=403,
     *           description="Not authorized to create factors",
     *
     *           @OA\JsonContent(
     *               type="object",
     *
     *               @OA\Property(property="message", type="string", example="You are not authorized to create factors"),
     *           ),
     *       ),
     * )
     */
    public function storeBatch(
        CreateBatchFactorRequest $request,
        Vulnerability $vulnerability,
        CreateBatchFactor $createBatchFactor,
    ): Response {
        if (request()->user()->cannot('create', Factor::class)) {
            return response()->json([
                'message' => 'You are not authorized to create factors',
            ], Response::HTTP_FORBIDDEN);
        }

        $createBatchFactorData = new CreateBatchFactorData(
            $request->factors,
        );

        return response()->json(
            FactorCollection::make($createBatchFactor->execute($createBatchFactorData, $vulnerability)),
            Response::HTTP_CREATED,
        );
    }

    /**
     * @OA\Get(
     *     path="/api/vulnerabilities/{vulnerability}/factors/{factor}",
     *     summary="Get a single factor for a vulnerability",
     *     security={{"bearerAuth": {}}},
     *     tags={"Factor"},
     *
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *
     *         @OA\Schema(type="integer"),
     *     ),
     *
     *     @OA\Parameter(
     *         name="factor",
     *         in="path",
     *         description="ID of the factor",
     *         required=true,
     *
     *         @OA\Schema(type="integer"),
     *     ),
     *
     *     @OA\Response(
     *         response=200,
     *         description="Factor details",
     *
     *         @OA\JsonContent(
     *             type="object",
     *             ref="App\Http\Resources\FactorResource",
     *         ),
     *     ),
     *
     *     @OA\Response(
     *           response=403,
     *           description="Not authorized to view factors",
     *
     *           @OA\JsonContent(
     *               type="object",
     *
     *               @OA\Property(property="message", type="string", example="You are not authorized to view factors"),
     *           ),
     *       ),
     * )
     */
    public function show(
        ShowFactorRequest $request,
        Vulnerability $vulnerability,
        Factor $factor,
        ShowFactor $showFactor,
    ): Response {
        if (request()->user()->cannot('view', Factor::class)) {
            return response()->json([
                'message' => 'You are not authorized to view factors',
            ], Response::HTTP_FORBIDDEN);
        }

        return response()->json(
            FactorResource::make($showFactor->execute($request, $vulnerability, $factor)),
            Response::HTTP_OK,
        );
    }

    /**
     * @OA\Put(
     *     path="/api/vulnerabilities/{vulnerability}/factors/{factor}",
     *     summary="Update a factor for a vulnerability",
     *     tags={"Factor"},
     *     security={{"bearerAuth": {}}},
     *
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *
     *         @OA\Schema(type="integer"),
     *     ),
     *
     *     @OA\Parameter(
     *         name="factor",
     *         in="path",
     *         description="ID of the factor",
     *         required=true,
     *
     *         @OA\Schema(type="integer"),
     *     ),
     *
     *     @OA\RequestBody(
     *         required=true,
     *
     *         @OA\JsonContent(
     *             type="object",
     *
     *             @OA\Property(property="name", type="string", example="Updated Factor Name"),
     *             @OA\Property(property="value", type="float", example="5.5"),
     *         ),
     *     ),
     *
     *     @OA\Response(
     *         response=200,
     *         description="Factor updated successfully",
     *
     *         @OA\JsonContent(
     *             type="object",
     *             ref="App\Http\Resources\FactorResource",
     *         ),
     *     ),
     *
     *     @OA\Response(
     *           response=403,
     *           description="Not authorized to update factors",
     *
     *           @OA\JsonContent(
     *               type="object",
     *
     *               @OA\Property(property="message", type="string", example="You are not authorized to update factors"),
     *           ),
     *       ),
     * )
     */
    public function update(
        UpdateFactorRequest $request,
        Vulnerability $vulnerability,
        Factor $factor,
        UpdateFactor $updateFactor,
    ): Response {
        if (request()->user()->cannot('update', Factor::class)) {
            return response()->json([
                'message' => 'You are not authorized to update factors',
            ], Response::HTTP_FORBIDDEN);
        }

        $updateFactorData = new UpdateFactorData(
            $request->name,
            $request->value,
        );

        return response()->json(
            FactorResource::make($updateFactor->execute($updateFactorData, $factor)),
            Response::HTTP_OK,
        );
    }

    /**
     * @OA\Delete(
     *     path="/api/vulnerabilities/{vulnerability}/factors/{factor}",
     *     summary="Delete a factor for a vulnerability",
     *     tags={"Factor"},
     *     security={{"bearerAuth": {}}},
     *
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *
     *         @OA\Schema(type="integer"),
     *     ),
     *
     *     @OA\Parameter(
     *         name="factor",
     *         in="path",
     *         description="ID of the factor",
     *         required=true,
     *
     *         @OA\Schema(type="integer"),
     *     ),
     *
     *     @OA\Response(
     *         response=200,
     *         description="Factor deleted successfully",
     *
     *         @OA\JsonContent(
     *             type="object",
     *
     *             @OA\Property(property="message", type="string", example="Factor deleted successfully"),
     *         ),
     *     ),
     *
     *     @OA\Response(
     *          response=403,
     *          description="Not authorized to delete factors",
     *
     *          @OA\JsonContent(
     *              type="object",
     *
     *              @OA\Property(property="message", type="string", example="You are not authorized to delete factors"),
     *          ),
     *      ),
     * )
     */
    public function destroy(
        Vulnerability $vulnerability,
        Factor $factor,
        DestroyFactor $destroyFactor,
    ): Response {
        if (request()->user()->cannot('delete', Factor::class)) {
            return response()->json([
                'message' => 'You are not authorized to delete factors',
            ], Response::HTTP_FORBIDDEN);
        }

        $destroyFactor->execute($factor);

        return response()->json([
            'message' => 'Factor deleted successfully',
        ], Response::HTTP_OK);
    }
}
