<?php

use Database\Enums\Tables;
use Database\Enums\ThreadPermalinks;
use Database\Enums\ThreadType;
use Modules\Organizations\Models\ClusterCategory;
use Modules\Organizations\Models\Organization;
use Modules\Users\Models\User;

beforeEach(function () {
    $this->method = 'POST';
    $this->routeName = 'organizations.clusters.store';
    $this->org = Organization::factory()->create();
    $this->category = ClusterCategory::factory(['organization_id' => $this->org->id])->create();
    $this->route = route($this->routeName, [
        'org' => $this->org,
    ]);
});

it('responds with status 404 if organization not found', function () {
    $this->assertNotFoundOnNonExistingOrganization($this->method, route($this->routeName, [
        'org' => 123,
    ]));
});

it('responds with unprocessed (category id not found)', function () {
    $this->assertDatabaseCount(table: Tables::CLUSTERS, count: 0);
    $this->assertDatabaseCount(table: Tables::CLUSTER_ADMINISTRATOR, count: 0);
    $response = $this->requestToRoute(
        method: $this->method,
        route: $this->route,
        data: [
            'category_id' => 123,
        ],
    );

    $response->assertUnprocessable()
        ->assertJsonFragment(['category_id' => ['The selected category id is invalid.']]);

    $this->assertDatabaseCount(table: Tables::CLUSTERS, count: 0);
    $this->assertDatabaseMissing(table: Tables::CLUSTER_ADMINISTRATOR, data: [
        'cluster_id' => 1,
        'user_id' => 321,
    ]);
});

it('successfully creates a cluster', function () {
    $this->assertDatabaseCount(table: Tables::CLUSTERS, count: 0);
    $this->assertDatabaseCount(table: Tables::CLUSTER_ADMINISTRATOR, count: 0);
    $this->assertDatabaseCount(table: Tables::THREADS, count: 0);

    $userId = User::factory()->create()->id;

    $data = [
        'category_id' => $this->category->id,
        'percentage_calculation_method' => 'all_modules',
        'name' => '__dummy_name__',
        'unlocked_modules' => ['5d7b5451f9b25ec31f8b4567' => true],
        'epilogue' => '__dummy_epilogue__',
        'external_link' => 'https://www.google.com/',
        'external_link_label' => '__dummy_label__',
        'school_year' => 2022,
        'active' => false,
        'cluster_administrators' => [
            $userId,
        ],
    ];

    $response = $this->requestToRoute(
        method: $this->method,
        route: $this->route,
        data: $data,
    );

    $response->assertCreated();

    $response = $response->json('data');

    $this->assertDatabaseCount(table: Tables::CLUSTERS, count: 1);
    $this->assertDatabaseHas(table: Tables::CLUSTERS, data: $response);
    $this->assertDatabaseHas(table: Tables::THREADS, data: [
        'type' => ThreadType::CLUSTER,
        'permalink' => ThreadPermalinks::CLUSTER_WALL,
        'is_commentable' => 1,
        'num_comments' => 0,
    ]);

    $this->assertDatabaseCount(table: Tables::CLUSTER_ADMINISTRATOR, count: 1);
    $this->assertDatabaseHas(table: Tables::CLUSTER_ADMINISTRATOR, data: [
        'cluster_id' => $response['id'],
        'user_id' => $userId,
    ]);
});

it('successfully creates a cluster without administrators', function () {
    $this->assertDatabaseCount(table: Tables::CLUSTERS, count: 0);
    $this->assertDatabaseCount(table: Tables::CLUSTER_ADMINISTRATOR, count: 0);
    $this->assertDatabaseCount(table: Tables::THREADS, count: 0);

    $data = [
        'category_id' => $this->category->id,
        'percentage_calculation_method' => 'all_modules',
        'name' => '__dummy_name__',
        'unlocked_modules' => ['5d7b5451f9b25ec31f8b4567' => true],
        'epilogue' => '__dummy_epilogue__',
        'external_link' => 'https://www.google.com/',
        'external_link_label' => '__dummy_label__',
        'school_year' => 2022,
        'active' => false,
    ];

    $response = $this->requestToRoute(
        method: $this->method,
        route: $this->route,
        data: $data,
    );

    $response->assertCreated();

    $response = $response->json('data');

    $this->assertDatabaseCount(table: Tables::CLUSTERS, count: 1);
    $this->assertDatabaseHas(table: Tables::CLUSTERS, data: $response);
    $this->assertDatabaseHas(table: Tables::THREADS, data: [
        'type' => ThreadType::CLUSTER,
        'permalink' => ThreadPermalinks::CLUSTER_WALL,
        'is_commentable' => 1,
        'num_comments' => 0,
    ]);

    $this->assertDatabaseCount(table: Tables::CLUSTER_ADMINISTRATOR, count: 0);
});
