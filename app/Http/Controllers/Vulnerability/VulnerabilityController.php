<?php

namespace App\Http\Controllers\Vulnerability;

use App\Actions\Vulnerability\CreateVulnerability;
use App\Actions\Vulnerability\DestroyVulnerability;
use App\Actions\Vulnerability\ListVulnerabilities;
use App\Actions\Vulnerability\ShowVulnerability;
use App\Actions\Vulnerability\UpdateVulnerability;
use App\DTOs\Vulnerability\CreateVulnerabilityData;
use App\DTOs\Vulnerability\UpdateVulnerabilityData;
use App\Http\Controllers\Controller;
use App\Http\Requests\Vulnerability\CreateVulnerabilityRequest;
use App\Http\Requests\Vulnerability\ListVulnerabilitiesRequest;
use App\Http\Requests\Vulnerability\ShowVulnerabilityRequest;
use App\Http\Requests\Vulnerability\UpdateVulnerabilityRequest;
use App\Http\Resources\VulnerabilityCollection;
use App\Http\Resources\VulnerabilityResource;
use App\Models\Vulnerability;
use Illuminate\Support\Facades\Storage;
use OpenApi\Annotations as OA;
use Symfony\Component\HttpFoundation\Response;

class VulnerabilityController extends Controller
{
    /**
     * @OA\Get(
     *     path="/api/vulnerabilities",
     *     summary="Get a list of vulnerabilities",
     *     tags={"Vulnerability"},
     *     security={{"bearerAuth": {}}},
     *
     *     @OA\Parameter(
     *          name="page",
     *          in="query",
     *          description="Page number",
     *          required=false,
     *
     *          @OA\Schema(type="integer", default=1)
     *      ),
     *
     *      @OA\Parameter(
     *          name="per_page",
     *          in="query",
     *          description="Number of items per page",
     *          required=false,
     *
     *          @OA\Schema(type="integer")
     *     ),
     *
     *     @OA\Parameter(
     *          name="include",
     *          in="query",
     *          description="Too include the relation of the factors",
     *
     *          @OA\Schema(
     *              type="string",
     *              enum={"factors", "user"},
     *          )
     *     ),
     *
     *     @OA\Parameter(
     *          name="filter[user_id]",
     *          in="query",
     *          description="Filter by user ID",
     *
     *          @OA\Schema(type="integer"),
     *      ),
     *
     *     @OA\Response(
     *         response=200,
     *         description="List of vulnerabilities",
     *
     *         @OA\JsonContent(
     *             type="array",
     *
     *             @OA\Items(ref="#/components/schemas/VulnerabilityCollection"),
     *         ),
     *     ),
     *
     *     @OA\Response(
     *             response=403,
     *             description="Not authorized to view vulnerabilities",
     *
     *             @OA\JsonContent(
     *                 type="object",
     *
     *                 @OA\Property(property="message", type="string", example="You are not authorized to view vulnerabilities"),
     *             ),
     *         ),
     * )
     */
    public function index(
        ListVulnerabilitiesRequest $request,
        ListVulnerabilities $listVulnerabilities,
    ): Response {
        if (request()->user()->cannot('viewAny', Vulnerability::class)) {
            return response()->json([
                'message' => 'You are not authorized to view vulnerabilities',
            ], Response::HTTP_FORBIDDEN);
        }

        return response()->json(
            VulnerabilityCollection::make(
                $listVulnerabilities->execute(
                    $request
                )
            ), Response::HTTP_OK);
    }

    /**
     * @OA\Post(
     *     path="/api/vulnerabilities",
     *     summary="Create a new vulnerability",
     *     tags={"Vulnerability"},
     *     security={{"bearerAuth": {}}},
     *
     *     @OA\RequestBody(
     *         required=true,
     *
     *         @OA\JsonContent(
     *             type="object",
     *
     *             @OA\Property(property="code", type="string", example="VUL-001"),
     *             @OA\Property(property="title", type="string", example="Security Vulnerability"),
     *             @OA\Property(property="overview", type="string", example="A brief overview"),
     *             @OA\Property(property="description", type="string", example="Full description"),
     *             @OA\Property(property="image", type="string", format="binary", description="Optional image file"),
     *         ),
     *     ),
     *
     *     @OA\Response(
     *         response=201,
     *         description="Vulnerability created successfully",
     *
     *         @OA\JsonContent(
     *             type="object",
     *             ref="#/components/schemas/VulnerabilityResource",
     *         ),
     *     ),
     *
     *     @OA\Response(
     *             response=403,
     *             description="Not authorized to create vulnerabilities",
     *
     *             @OA\JsonContent(
     *                 type="object",
     *
     *                 @OA\Property(property="message", type="string", example="You are not authorized to create vulnerabilities"),
     *             ),
     *         ),
     * )
     */
    public function store(
        CreateVulnerabilityRequest $request,
        CreateVulnerability $createVulnerability,
    ): Response {
        if (request()->user()->cannot('create', Vulnerability::class)) {
            return response()->json([
                'message' => 'You are not authorized to create vulnerabilities',
            ], Response::HTTP_FORBIDDEN);
        }

        $createVulnerabilityData = new CreateVulnerabilityData(
            $request->input('code'),
            $request->input('title'),
            $request->input('overview'),
            $request->input('description'),
            $request->user()->id,
            $request->has('image') ?
                Storage::url($request->file('image')->store('public')) : null,
        );

        return response()->json(
            VulnerabilityResource::make(
                $createVulnerability->execute(
                    $createVulnerabilityData,
                ),
            ),
            Response::HTTP_CREATED,
        );
    }

    /**
     * @OA\Get(
     *     path="/api/vulnerabilities/{vulnerability}",
     *     summary="Get a single vulnerability",
     *     tags={"Vulnerability"},
     *     security={{"bearerAuth": {}}},
     *
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *
     *         @OA\Schema(type="integer"),
     *     ),
     *
     *     @OA\Response(
     *         response=200,
     *         description="Vulnerability details",
     *
     *         @OA\JsonContent(
     *             type="object",
     *             ref="#/components/schemas/VulnerabilityResource",
     *         ),
     *     ),
     *
     *     @OA\Response(
     *             response=403,
     *             description="Not authorized to view vulnerabilities",
     *
     *             @OA\JsonContent(
     *                 type="object",
     *
     *                 @OA\Property(property="message", type="string", example="You are not authorized to view vulnerabilities"),
     *             ),
     *         ),
     * )
     */
    public function show(
        ShowVulnerabilityRequest $request,
        Vulnerability $vulnerability,
        ShowVulnerability $showVulnerability,
    ): Response {
        if (request()->user()->cannot('view', Vulnerability::class)) {
            return response()->json([
                'message' => 'You are not authorized to view vulnerabilities',
            ], Response::HTTP_FORBIDDEN);
        }

        return response()->json(
            VulnerabilityResource::make(
                $showVulnerability->execute(
                    $request,
                    $vulnerability,
                ),
            ), Response::HTTP_OK,
        );
    }

    /**
     * @OA\Put(
     *     path="/api/vulnerabilities/{vulnerability}",
     *     summary="Update a vulnerability",
     *     tags={"Vulnerability"},
     *     security={{"bearerAuth": {}}},
     *
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *
     *         @OA\Schema(type="integer"),
     *     ),
     *
     *     @OA\RequestBody(
     *         required=true,
     *
     *         @OA\JsonContent(
     *             type="object",
     *
     *             @OA\Property(property="code", type="string", example="VUL-001"),
     *             @OA\Property(property="title", type="string", example="Updated Title"),
     *             @OA\Property(property="overview", type="string", example="Updated Overview"),
     *             @OA\Property(property="description", type="string", example="Updated Description"),
     *         ),
     *     ),
     *
     *     @OA\Response(
     *         response=200,
     *         description="Vulnerability updated successfully",
     *
     *         @OA\JsonContent(
     *             type="object",
     *             ref="#/components/schemas/VulnerabilityResource",
     *         ),
     *     ),
     *
     *     @OA\Response(
     *             response=403,
     *             description="Not authorized to update vulnerabilities",
     *
     *             @OA\JsonContent(
     *                 type="object",
     *
     *                 @OA\Property(property="message", type="string", example="You are not authorized to update vulnerabilities"),
     *             ),
     *         ),
     * )
     */
    public function update(
        UpdateVulnerabilityRequest $request,
        Vulnerability $vulnerability,
        UpdateVulnerability $updateVulnerability,
    ): Response {
        if (request()->user()->cannot('update', Vulnerability::class)) {
            return response()->json([
                'message' => 'You are not authorized to update vulnerabilities',
            ], Response::HTTP_FORBIDDEN);
        }

        $updateVulnerabilityData = new UpdateVulnerabilityData(
            $request->input('code'),
            $request->input('title'),
            $request->input('overview'),
            $request->input('description'),
            $request->has('image') ?
                Storage::url($request->file('image')->store('public')) : $vulnerability->image_url,
        );

        return response()->json(
            VulnerabilityResource::make(
                $updateVulnerability->execute(
                    $updateVulnerabilityData,
                    $vulnerability,
                ),
            ),
            Response::HTTP_CREATED,
        );
    }

    /**
     * @OA\Delete(
     *     path="/api/vulnerabilities/{vulnerability}",
     *     summary="Delete a vulnerability",
     *     tags={"Vulnerability"},
     *     security={{"bearerAuth": {}}},
     *
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *
     *         @OA\Schema(type="integer"),
     *     ),
     *
     *     @OA\Response(
     *         response=200,
     *         description="Vulnerability deleted successfully",
     *     ),
     *          @OA\Response(
     *            response=403,
     *            description="Not authorized to delete vulnerabilities",
     *
     *            @OA\JsonContent(
     *                type="object",
     *
     *                @OA\Property(property="message", type="string", example="You are not authorized to delete vulnerabilities"),
     *            ),
     *        ),
     * )
     */
    public function destroy(
        Vulnerability $vulnerability,
        DestroyVulnerability $destroyVulnerability,
    ): Response {
        if (request()->user()->cannot('delete', Vulnerability::class)) {
            return response()->json([
                'message' => 'You are not authorized to delete vulnerabilities',
            ], Response::HTTP_FORBIDDEN);
        }

        $destroyVulnerability->execute($vulnerability);

        return response()->json([
            'message' => 'Vulnerability deleted successfully',
        ], Response::HTTP_OK);
    }
}
