<?php

use App\Models\User;
use App\Models\Vulnerability;
use Illuminate\Testing\TestResponse;
use Laravel\Sanctum\Sanctum;

beforeEach(function () {
    $this->routeName = 'vulnerabilities.update';

    $this->user = User::factory()->create([
        'is_admin' => true,
    ]);

    Sanctum::actingAs($this->user);

    $this->vulnerability = Vulnerability::factory()->create([
        'user_id' => $this->user->id,
    ]);
});

it('responds with status 404 if cluster not found', function () {
    $route = route($this->routeName, ['vulnerability' => $this->vulnerability->id + 1]);

    /** @var TestResponse $response */
    $response = $this->get($route);

    $response->assertNotFound();
});

it('creates a new vulnerability', function () {
    $route = route($this->routeName, ['vulnerability' => $this->vulnerability->id]);

    $payload = [
        'code' => 'VUL-001',
        'title' => 'Security Vulnerability',
        'overview' => 'A brief overview',
        'description' => 'Full description',
    ];

    $response = $this->putJson($route, $payload);

    $response->assertStatus(201);
    $response->assertJsonStructure([
        'id',
        'code',
        'title',
        'overview',
        'description',
        'image_url',
        'user_id',
    ]);
});

it('returns a forbidden response if user is not authorized', function () {
    $route = route($this->routeName, ['vulnerability' => $this->vulnerability->id]);

    $user = User::factory()->create([
        'is_admin' => false,
    ]);

    Sanctum::actingAs($user);

    $payload = [
        'code' => 'VUL-001',
        'title' => 'Security Vulnerability',
        'overview' => 'A brief overview',
        'description' => 'Full description',
    ];

    $response = $this->putJson($route, $payload);
    $response->assertStatus(403);

    $response->assertJsonStructure([
        'message',
    ]);
});
