<?php

namespace App\Http\Controllers\Vulnerability;

use App\Actions\Vulnerability\ListVulnerabilities;
use App\Actions\Vulnerability\StoreVulnerability;
use App\DTOs\Vulnerability\StoreVulnerabilityData;
use App\Http\Controllers\Controller;
use App\Http\Requests\Vulnerability\ListVulnerabilityRequest;
use App\Http\Requests\Vulnerability\StoreVulnerabilityRequest;
use App\Http\Requests\Vulnerability\UpdateVulnerabilityRequest;
use App\Http\Resources\VulnerabilityCollection;
use App\Http\Resources\VulnerabilityResource;
use App\Models\Vulnerability;
use Illuminate\Support\Facades\Storage;
use OpenApi\Annotations as OA;
use Symfony\Component\HttpFoundation\Response;

class VulnerabilityController extends Controller
{
    /**
     * @OA\Get(
     *     path="/api/vulnerabilities",
     *     summary="Get a list of vulnerabilities",
     *     tags={"Vulnerability"},
     *     security={{"bearerAuth": {}}},
     *     @OA\Parameter(
     *          name="page",
     *          in="query",
     *          description="Page number",
     *          required=false,
     *          @OA\Schema(type="integer", default=1)
     *      ),
     *      @OA\Parameter(
     *          name="per_page",
     *          in="query",
     *          description="Number of items per page",
     *          required=false,
     *          @OA\Schema(type="integer")
     *     ),
     *     @OA\Parameter(
     *          name="include",
     *          in="query",
     *          description="Too include the relation of the factors",
     *          @OA\Schema(
     *              type="string",
     *              enum={"factors", "user"},
     *          )
     *     ),
     *     @OA\Parameter(
     *          name="filter[user_id]",
     *          in="query",
     *          description="Filter by user ID",
     *          @OA\Schema(type="integer"),
     *      ),
     *     @OA\Response(
     *         response=200,
     *         description="List of vulnerabilities",
     *         @OA\JsonContent(
     *             type="array",
     *             @OA\Items(ref="#/components/schemas/VulnerabilityCollection"),
     *         ),
     *     ),
     * )
     */
    public function index(
        ListVulnerabilityRequest $request,
        ListVulnerabilities $listVulnerabilities,
    ): Response {
        return response()->json(
            VulnerabilityCollection::make(
                $listVulnerabilities->execute(
                    $request
                )
            ), Response::HTTP_OK);
    }

    /**
     * @OA\Post(
     *     path="/api/vulnerabilities",
     *     summary="Create a new vulnerability",
     *     tags={"Vulnerability"},
     *     security={{"bearerAuth": {}}},
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="code", type="string", example="VUL-001"),
     *             @OA\Property(property="title", type="string", example="Security Vulnerability"),
     *             @OA\Property(property="overview", type="string", example="A brief overview"),
     *             @OA\Property(property="description", type="string", example="Full description"),
     *             @OA\Property(property="image", type="string", format="binary", description="Optional image file"),
     *         ),
     *     ),
     *     @OA\Response(
     *         response=201,
     *         description="Vulnerability created successfully",
     *         @OA\JsonContent(
     *             type="object",
     *             ref="#/components/schemas/VulnerabilityResource",
     *         ),
     *     ),
     * )
     */
    public function store(
        StoreVulnerabilityRequest $request,
        StoreVulnerability $storeVulnerability,
    ): Response {
        $storeVulnerabilityData = new StoreVulnerabilityData(
            $request->input('code'),
            $request->input('title'),
            $request->input('overview'),
            $request->input('description'),
            $request->user()->id,
            $request->has('image') ?
                Storage::url($request->file('image')->store('public')) : null,
        );

        return response()->json(
            VulnerabilityResource::make(
                $storeVulnerability->execute(
                    $storeVulnerabilityData,
                ),
            ),
            Response::HTTP_CREATED,
        );
    }

    /**
     * @OA\Get(
     *     path="/api/vulnerabilities/{vulnerability}",
     *     summary="Get a single vulnerability",
     *     tags={"Vulnerability"},
     *     security={{"bearerAuth": {}}},
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *         @OA\Schema(type="integer"),
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Vulnerability details",
     *         @OA\JsonContent(
     *             type="object",
     *             ref="#/components/schemas/VulnerabilityResource",
     *         ),
     *     ),
     * )
     */
    public function show(Vulnerability $vulnerability): Response
    {
        return response()->json(
            VulnerabilityResource::make($vulnerability->load(['factors', 'user'])),
            Response::HTTP_OK,
        );
    }

    /**
     * @OA\Put(
     *     path="/api/vulnerabilities/{vulnerability}",
     *     summary="Update a vulnerability",
     *     tags={"Vulnerability"},
     *     security={{"bearerAuth": {}}},
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *         @OA\Schema(type="integer"),
     *     ),
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="code", type="string", example="VUL-001"),
     *             @OA\Property(property="title", type="string", example="Updated Title"),
     *             @OA\Property(property="overview", type="string", example="Updated Overview"),
     *             @OA\Property(property="description", type="string", example="Updated Description"),
     *         ),
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Vulnerability updated successfully",
     *         @OA\JsonContent(
     *             type="object",
     *             ref="#/components/schemas/VulnerabilityResource",
     *         ),
     *     ),
     * )
     */
    public function update(UpdateVulnerabilityRequest $request, Vulnerability $vulnerability): Response
    {
        $vulnerability->update(
            $request->validated()
        );

        return response()->json(
            VulnerabilityResource::make($vulnerability),
            Response::HTTP_OK,
        );
    }

    /**
     * @OA\Delete(
     *     path="/api/vulnerabilities/{vulnerability}",
     *     summary="Delete a vulnerability",
     *     tags={"Vulnerability"},
     *     security={{"bearerAuth": {}}},
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *         @OA\Schema(type="integer"),
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Vulnerability deleted successfully",
     *     ),
     *     @OA\Response(
     *         response=403,
     *         description="You are not authorized to delete this vulnerability",
     *     ),
     * )
     */
    public function destroy(Vulnerability $vulnerability): Response
    {
        if (request()->user()->cannot('delete', Vulnerability::class)) {
            return response()->json([
                'message' => 'You are not authorized to delete this vulnerability',
            ], Response::HTTP_FORBIDDEN);
        }

        $filePath = str_replace('/storage/', '', $vulnerability->image_url);
        if (Storage::disk('public')->exists($filePath)) {
            Storage::disk('public')->delete($filePath);
        }

        $vulnerability->delete();

        return response()->json([
            'message' => 'Vulnerability deleted successfully',
        ], Response::HTTP_OK);
    }
}
