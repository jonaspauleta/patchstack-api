<?php

namespace App\Http\Controllers\Vulnerability\Factor;

use App\Http\Controllers\Controller;
use App\Http\Requests\Vulnerability\Factor\StoreBatchFactorRequest;
use App\Http\Requests\Vulnerability\Factor\StoreFactorRequest;
use App\Http\Requests\Vulnerability\Factor\UpdateFactorRequest;
use App\Http\Resources\FactorResource;
use App\Models\Factor;
use App\Models\Vulnerability;
use OpenApi\Annotations as OA;
use Symfony\Component\HttpFoundation\Response;

class FactorController extends Controller
{
    /**
     * @OA\Get(
     *     path="/api/vulnerabilities/{vulnerability}/factors",
     *     summary="Get factors for a vulnerability",
     *     tags={"Factor"},
     *     security={{"bearerAuth": {}}},
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *         @OA\Schema(type="integer"),
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="List of factors for the vulnerability",
     *         @OA\JsonContent(
     *             type="array",
     *             @OA\Items(ref="#/components/schemas/FactorResource"),
     *         ),
     *     ),
     * )
     */
    public function index(Vulnerability $vulnerability): Response
    {
        return response()->json(
            FactorResource::collection($vulnerability->factors()->get()),
            Response::HTTP_OK,
        );
    }

    /**
     * @OA\Post(
     *     path="/api/vulnerabilities/{vulnerability}/factors",
     *     summary="Create a new factor for a vulnerability",
     *     tags={"Factor"},
     *     security={{"bearerAuth": {}}},
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *         @OA\Schema(type="integer"),
     *     ),
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="name", type="string", example="Factor Name"),
     *             @OA\Property(property="value", type="float", example="5.5"),
     *         ),
     *     ),
     *     @OA\Response(
     *         response=201,
     *         description="Factor created successfully",
     *         @OA\JsonContent(
     *             type="object",
     *             ref="#/components/schemas/FactorResource",
     *         ),
     *     ),
     * )
     */
    public function store(StoreFactorRequest $request, Vulnerability $vulnerability): Response
    {
        $factor = $vulnerability->factors()->create(
            $request->validated(),
        );

        return response()->json(
            FactorResource::make($factor),
            Response::HTTP_CREATED,
        );
    }

    /**
     * @OA\Post(
     *     path="/api/vulnerabilities/{vulnerability}/factors/batch",
     *     summary="Create multiple factors for a vulnerability in a batch",
     *     tags={"Factor"},
     *     security={{"bearerAuth": {}}},
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *         @OA\Schema(type="integer"),
     *     ),
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="factors", type="array", @OA\Items(
     *                 @OA\Property(property="name", type="string", example="Factor Name"),
     *                 @OA\Property(property="value", type="float", example="5.5"),
     *             )),
     *         ),
     *     ),
     *     @OA\Response(
     *         response=201,
     *         description="Factors created successfully",
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="message", type="string", example="Factors created successfully"),
     *         ),
     *     ),
     *     @OA\Response(
     *          response=500,
     *          description="Internal Server Error",
     *          @OA\JsonContent(
     *              type="object",
     *              @OA\Property(property="message", type="string", example="Error creating factors"),
     *          ),
     *     ),
     * )
     */
    public function storeBatch(StoreBatchFactorRequest $request, Vulnerability $vulnerability): Response
    {
        $factors = [];
        foreach ($request->factors as $factor) {
            $factors[] = [
                'name' => $factor['name'],
                'value' => $factor['value'],
                'vulnerability_id' => $vulnerability->id,
            ];
        }

        if (!Factor::insert($factors)) {
            return response()->json([
                'message' => 'Error creating factors',
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }

        return response()->json([
            'message' => 'Factors created successfully',
        ], Response::HTTP_CREATED);
    }

    /**
     * @OA\Get(
     *     path="/api/vulnerabilities/{vulnerability}/factors/{factor}",
     *     summary="Get a single factor for a vulnerability",
     *     security={{"bearerAuth": {}}},
     *     tags={"Factor"},
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *         @OA\Schema(type="integer"),
     *     ),
     *     @OA\Parameter(
     *         name="factor",
     *         in="path",
     *         description="ID of the factor",
     *         required=true,
     *         @OA\Schema(type="integer"),
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Factor details",
     *         @OA\JsonContent(
     *             type="object",
     *             ref="#/components/schemas/FactorResource",
     *         ),
     *     ),
     * )
     */
    public function show(Vulnerability $vulnerability, Factor $factor): Response
    {
        return response()->json(
            FactorResource::make($factor),
            Response::HTTP_OK,
        );
    }

    /**
     * @OA\Put(
     *     path="/api/vulnerabilities/{vulnerability}/factors/{factor}",
     *     summary="Update a factor for a vulnerability",
     *     tags={"Factor"},
     *     security={{"bearerAuth": {}}},
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *         @OA\Schema(type="integer"),
     *     ),
     *     @OA\Parameter(
     *         name="factor",
     *         in="path",
     *         description="ID of the factor",
     *         required=true,
     *         @OA\Schema(type="integer"),
     *     ),
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="name", type="string", example="Updated Factor Name"),
     *             @OA\Property(property="value", type="float", example="5.5"),
     *         ),
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Factor updated successfully",
     *         @OA\JsonContent(
     *             type="object",
     *             ref="#/components/schemas/FactorResource",
     *         ),
     *     ),
     * )
     */
    public function update(UpdateFactorRequest $request, Vulnerability $vulnerability, Factor $factor): Response
    {
        $factor->update(
            $request->validated()
        );

        return response()->json(
            FactorResource::make($factor),
            Response::HTTP_OK,
        );
    }

    /**
     * @OA\Delete(
     *     path="/api/vulnerabilities/{vulnerability}/factors/{factor}",
     *     summary="Delete a factor for a vulnerability",
     *     tags={"Factor"},
     *     security={{"bearerAuth": {}}},
     *     @OA\Parameter(
     *         name="vulnerability",
     *         in="path",
     *         description="ID of the vulnerability",
     *         required=true,
     *         @OA\Schema(type="integer"),
     *     ),
     *     @OA\Parameter(
     *         name="factor",
     *         in="path",
     *         description="ID of the factor",
     *         required=true,
     *         @OA\Schema(type="integer"),
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Factor deleted successfully",
     *         @OA\JsonContent(
     *             type="object",
     *             @OA\Property(property="message", type="string", example="Factor deleted successfully"),
     *         ),
     *     ),
     * )
     */
    public function destroy(Vulnerability $vulnerability, Factor $factor): Response
    {
        $factor->delete();

        return response()->json([
            'message' => 'Factor deleted successfully',
        ], Response::HTTP_OK);
    }
}
