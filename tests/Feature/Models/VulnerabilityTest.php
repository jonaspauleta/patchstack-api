<?php

use App\Models\User;
use App\Models\Vulnerability;

beforeEach(function () {
    $this->assertDatabaseCount('vulnerabilities', 0);
    $this->assertDatabaseCount('factors', 0);

    $this->user = User::factory()->create();
    $this->vulnerability = Vulnerability::factory()->create();
});

it('checks if Vulnerability can attach a user', function () {
    $this->vulnerability->user()->attach($this->user);
    $this->assertSame(1, $this->cluster->administrators->count());
    $this->assertDatabaseHas(Tables::CLUSTER_ADMINISTRATOR, [
        'user_id' => $this->user->id,
        'cluster_id' => $this->cluster->id,
    ]);
});

it('checks if Cluster can attach a Factor multiple', function () {
    $factor = User::factory()->create();
    $users = [
        $this->user->id,
        $user->id,
    ];

    $this->cluster->administrators()->sync($users);
    $this->assertSame(count($users), $this->cluster->administrators->count());

    $this->assertDatabaseHas(Tables::CLUSTER_ADMINISTRATOR, [
        'user_id' => $this->user->id,
        'cluster_id' => $this->cluster->id,
    ]);

    $this->assertDatabaseHas(Tables::CLUSTER_ADMINISTRATOR, [
        'user_id' => $user->id,
        'cluster_id' => $this->cluster->id,
    ]);
});

it('returns thread object', function () {
    $this->assertDatabaseCount('vulnerabilities', 1);

    $vulnerability = Vulnerability::factory()->create();

    $this->assertDatabaseCount('vulnerabilities', 2);

    $thread = $cluster->thread;

    $this->assertInstanceOf(Thread::class, $cluster->thread);
    $this->assertDatabaseHas(Tables::THREADS, [
        'type' => $thread->type,
        'permalink' => $thread->permalink,
        'is_commentable' => $thread->is_commentable,
        'num_comments' => $thread->num_comments,
    ]);
});
